#include <common.h>

static char
ntos_chr(uint32_t n) {
	return (n < 10) ? (n + '0') : (n - 10 + 'A');
}

static size_t
ntos(uint32_t n, char *s, int base)
{
	size_t len;
	if (base < 2 || base > 16)
		return 0;
	len = 0;
	do {
		s[len++] = ntos_chr(n % base);
		n /= base;
	} while(n != 0);
	for (size_t i = 0; i < len/2; i++) {
		char t = s[i];
		s[i] = s[len - i - 1];
		s[len - i - 1] = t;
	}
	s[len] = '\0';
	return len;
}

static size_t
_strfmt(void (*outc)(char c, size_t i, void *p), void *p, const char *fmt, va_list va)
{
	int f;
	size_t l, nl;
	char nbuf[16];
	const char *sfmt;

	l = 0;
	nl = 0;

	do {
		f = *(fmt++);

		if (f != '%') {
			outc(f, l++, p);
		} else {
			f = *(fmt++);

			switch(f) {
				case 'b':
					nl = ntos(va_arg(va, uint32_t), nbuf, 2);
					break;
				case 'd':
					nl = ntos(va_arg(va, uint32_t), nbuf, 10);
					break;
				case 'p':
					outc('0', l++, p);
					outc('x', l++, p);
				case 'x':
					nl = ntos(va_arg(va, uint32_t), nbuf, 16);
					break;
				case 's':
					sfmt = va_arg(va, const char*);
					do { outc(*(sfmt++), l++, p); } while(*sfmt);
					break;
				default:
					outc('%', l++, p);
					outc(f, l++, p);
					break;
			}

			if (nl) {
				for (size_t i = 0; i < nl; i++)
					outc(nbuf[i], l++, p);
				nl = 0;
			}
		}
	} while(f != '\0');

	return l;
}

static void
_strfmt_sprintf_out(char c, size_t l, void *p)
{
	((char*)p)[l] = c;
}

int
sprintf(char *str, const char *fmt, ...)
{
	size_t l;

	va_list va;
	va_start(va, fmt);

	l = _strfmt(_strfmt_sprintf_out, str, fmt, va);
	va_end(va);

	return l;
}
